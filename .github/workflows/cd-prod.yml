name: cd-prod
env:
  # TODO: Configure the following environment variables
  EB_PACKAGE_S3_BUCKET_NAME : "boostnet-ws-prod-dockerrun"
  EB_APPLICATION_NAME       : "boostnet-ws-prod"
  EB_ENVIRONMENT_NAME       : "boostnet-ws-prod-env"
  DEPLOY_PACKAGE_NAME       : "package.zip"
  AWS_REGION_NAME           : "us-east-2"
  ECR_REPOSITORY            : "boostnet-ws-prod"

on: 
  push:
    branches: 
      - prod

jobs:

  build-and-push-docker-image:
    runs-on: ubuntu-latest

    outputs:
      image-name: ${{ steps.build-image.outputs.image-name }}

    steps:
      - name: Git clone our repository
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.DEPLOYMENTUSER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOYMENTUSER_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION_NAME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        working-directory: .
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image-name=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> "$GITHUB_OUTPUT"
    
      - name: Update Dockerrun.aws.json
        run: |
          jq '.Image.Name = "${{ steps.build-image.outputs.image-name }}"' Dockerrun.aws.json > tmp.json
          mv tmp.json Dockerrun.aws.json
           
      - name: Zip and copy Dockerrun.aws.json and ebextensions to S3
        run: |
          zip -r ${{ env.DEPLOY_PACKAGE_NAME }} Dockerrun.aws.json .platform .ebextensions
          aws s3 cp ${{ env.DEPLOY_PACKAGE_NAME }} s3://${{ env.EB_PACKAGE_S3_BUCKET_NAME }}/${{ env.DEPLOY_PACKAGE_NAME }}

  deploy_to_eb:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [build-and-push-docker-image]

    steps:
      - name: Configure my AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id    : ${{ secrets.DEPLOYMENTUSER_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.DEPLOYMENTUSER_SECRET_KEY }}
          aws-region           : ${{ env.AWS_REGION_NAME }}
      
      - name: Create new ElasticBeanstalk Application Version
        run : |
          aws elasticbeanstalk create-application-version \
          --application-name ${{ env.EB_APPLICATION_NAME }} \
          --source-bundle S3Bucket="${{ env.EB_PACKAGE_S3_BUCKET_NAME }}",S3Key="${{ env.DEPLOY_PACKAGE_NAME }}" \
          --version-label "Ver-${{ github.sha }}" \
          --description "CommitSHA-${{ github.sha }}" \
          --process

      - name: Deploy our new application version
        run : aws elasticbeanstalk update-environment --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"

      - name: Waiting for environment to update
        run : aws elasticbeanstalk wait environment-updated --environment-name ${{ env.EB_ENVIRONMENT_NAME }} --version-label "Ver-${{ github.sha }}"

      - name: Print nice message on completion of CD Pipeline
        run : echo "Deployment finished successfully"